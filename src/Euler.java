import java.util.*;

public class Euler {
    private HashMap<Integer,Integer> fibCache = new HashMap<Integer,Integer>();

    /*
     * Euler 1
     * If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. 
     * The sum of these multiples is 23.  Find the sum of all the multiples of 3 or 5 below 1000.
     */
    public int euler1() {
        int sum = 0;
        for (int i=3;i<1000;i++) {
            if (((i % 3) == 0) || ((i % 5) == 0))
            sum = sum + i;
        }
        return sum;
    }

    /*
     * Euler 2
     * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By 
     * starting with 1 and 2, the first 10 terms will be:
     * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
     * By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
     * find the sum of the even-valued terms.
     */
    private int fib(int n) {
        if (n == 0)
            return 1;
        if (n == 1)
            return 1;
        if (fibCache.containsKey(n))
            return fibCache.get(n);
        else {
            fibCache.put(n, fib(n-1) + fib(n-2));
            return fibCache.get(n);
        }
    }
    
    public int euler2 () {
        int sum = 0;
        int i = 1;
        while(true) {
            if (fib(i) > 4000000)
                break;
            sum = sum + fib(i);
            i = i + 1;
        }
        return sum;
    }

    /*
    * The prime factors of 13195 are 5, 7, 13 and 29.
    * What is the largest prime factor of the number 600851475143?
    */
    public long euler3 () {
        long number = 600851475143L;
        long largest = 0;
        for (int i = 2; i <= number / i; i++) {
            if (number % i == 0) {
                largest = i;
                number = number / i;
            }
        }
        return largest;
    }


    /*
     * Euler 4
     * A palindromic number reads the same both ways. The largest palindrome made from the product of 
     * two 2-digit numbers is 9009 = 91 Ã— 99.  Find the largest palindrome made from the product of 
     * two 3-digit numbers.
     */  
    public int euler4() {
        int palindrome = 0;
        for (int i=100;i<1000;i++) {
            for (int j=100;j<1000;j++) {
                int prod = i*j;
                String prodStr = Integer.toString(prod);
                String reverseProd = new StringBuffer(prodStr).reverse().toString();
                if (prodStr.equals(reverseProd))
                    if (prod > palindrome)
                        palindrome = prod;
            }
        }
        return palindrome;
    }

    /*
     * Euler 5
     * 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without 
     * any remainder. What is the smallest positive number that is evenly divisible by all of the 
     * numbers from 1 to 20?
     */
    public int euler5() {
        int smallest = 20;
        boolean foundit = false;
        while (true) {
            for (int i=2;i<=20;i++) {
                if ((smallest % i) == 0) {
                    foundit = true;
                    continue;
                } else {
                    smallest += 20;
                    foundit = false;
                    break;
                }
            }
            if (foundit)
                break;
        }
        return smallest;
    }

    /* Euler 6
     * Find the difference between the sum of the squares of the first one hundred natural numbers 
     * and the square of the sum.
     */
    public int euler6() {
        int sum_squares = 0;
        int sum_numbers = 0;
        for (int i=1;i<=100;i++) {
            sum_squares = sum_squares + i * i;
            sum_numbers = sum_numbers + i;
        }
        return sum_numbers * sum_numbers - sum_squares;
    }

    /* Euler 7
     * What is the 10,001st prime number?
     */
    public int euler7() {
        ArrayList<Integer> primes = new ArrayList<Integer>();
        primes.add(3);
        int n = 5;
        while (primes.size() <= 10001) {
            boolean notPrime = false;
            for (int current : primes) {
                if (n % current == 0) {
                    notPrime = true;
                    n += 2;
                    break;
                }
            }
            if (notPrime) continue;
            primes.add(n);
            n += 2;
        }
        return primes.get(9999);
    }

    private List<Integer> findPrimes(int n) {
        List<Integer> primes = new ArrayList<Integer>();
        primes.add(2);
        int m = 3;
        while (m < (n*0.5 +1)) {
            boolean notPrime = false;
            for (int current : primes) {
                if (n % current == 0) {
                    notPrime = true;
                    n += 2;
                    break;
                }
            }
            if (notPrime) continue;
            primes.add(m);
            m += 2;
        }
        return primes;
    }

    private int subEuler8(ArrayList<Integer> lst) {
        int returnValue = 0;
        for (int i=0;i<5;i++) {
            returnValue += lst.get(i);
        }
        return returnValue;
    }

    /* Euler 8
     * Find the greatest product of five consecutive digits in the 1000-digit number.
     * the regexp -> 'a,'bs/\(\d\)/\1,/g
     */
    public int euler8() {
        String sequenceOfNumbers = 
            "73167176531330624919225119674426574742355349194934"+
            "96983520312774506326239578318016984801869478851843"+
            "85861560789112949495459501737958331952853208805511"+
            "12540698747158523863050715693290963295227443043557"+
            "66896648950445244523161731856403098711121722383113"+
            "62229893423380308135336276614282806444486645238749"+
            "30358907296290491560440772390713810515859307960866"+
            "70172427121883998797908792274921901699720888093776"+
            "65727333001053367881220235421809751254540594752243"+
            "52584907711670556013604839586446706324415722155397"+
            "53697817977846174064955149290862569321978468622482"+
            "83972241375657056057490261407972968652414535100474"+
            "82166370484403199890008895243450658541227588666881"+
            "16427171479924442928230863465674813919123162824586"+
            "17866458359124566529476545682848912883142607690042"+
            "24219022671055626321111109370544217506941658960408"+
            "07198403850962455444362981230987879927244284909188"+
            "84580156166097919133875499200524063689912560717606"+
            "05886116467109405077541002256983155200055935729725"+
            "71636269561882670428252483600823257530420752963450";
        String[] ary = sequenceOfNumbers.split("(?!^)");
        ArrayList<Integer> numberList = new ArrayList<>();
        for (int i=0;i<ary.length;i++) {
            numberList.add(new Integer(ary[i]));
        }
        int greatest = subEuler8(numberList);
        while (true) {
            numberList.remove(0);
            if (numberList.size() == 4)
                break;
            if (subEuler8(numberList) > greatest)
                greatest = subEuler8(numberList);
        }
        return greatest;
    }
    
    /*
     * There exists exactly one Pythagorean triplet for which a + b + c = 1000.
     * Find the product abc.
     * Euclid's formula : a = m*m - n*n, b=2mn, c = m*m+n*n
     */
    public Set<Integer> euler9() {
        int sum = 1000;
        Set<Integer> set = new HashSet<>();
        for (int x=1;x<Math.ceil(sum / 3);x++) {
            for (int y=x+1;y<=sum+x;y++) {
                int z = sum - x - y;
                if (z * z == x * x + y * y) {
                    set.add(x);
                    set.add(y);
                    set.add(z);
                    break;
                }
            }
        }
        return set;
    }
}//end Euler
